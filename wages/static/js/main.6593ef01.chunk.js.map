{"version":3,"sources":["style.scss","index.js"],"names":["module","exports","Numeral","locale","apiUrl","defaultLayout","colorway","Style","primary","success","info","paper_bgcolor","bodyBg","plot_bgcolor","autosize","font","family","fontFamily","color","fontColor","hoverlabel","bordercolor","bgcolor","Graph","props","state","filterDims","filterValues","plotData","DataFrame","isLoading","onMenuChange","bind","data","parsed","observations","map","x","dims","dimensions","reduce","r","d","concept","code","modalite","value","valeur","Object","keys","this","setState","queryParams","entries","e","join","fetch","dsd","then","res","json","createDataFrame","dimCode","valCode","list","dataRequest","results","filter","filterableDims","includes","dict","xs","GraphFilters","style","display","justifyContent","alignItems","animation","GraphPlot","React","Component","df","measure","min","max","byVar","groupByVars","withColumn","parseInt","get","match","groupBy","pivot","vals","toArray","sortBy","ticks","format","slice","length","lowerBound","upperBound","eff","select","renameAll","toDict","dim","variant","formatData","computeHoverText","dataOptions","type","hoverinfo","toCollection","selectPlotData","group","name","groupKey","opacity","tickvals","lay","bargap","barmode","xaxis","tickmode","ticktext","computeTickText","layout","useResizeHandler","width","height","sel","i","GraphFilter","key","filterDim","filterValue","Body","handleChange","event","target","val","opt","conceptScheme","modalites","libelleFr","Group","controlId","Label","Control","as","onChange","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6593ef01.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"primary\":\"#1a1a1a\",\"secondary\":\"#fff\",\"success\":\"#4BBF73\",\"info\":\"#1F9BCF\",\"warning\":\"#f0ad4e\",\"danger\":\"#d9534f\",\"light\":\"#fff\",\"dark\":\"#343a40\",\"bodyBg\":\"#fff\",\"fontFamily\":\"\\\"Nunito Sans\\\",-apple-system,BlinkMacSystemFont,\\\"Segoe UI\\\",Roboto,\\\"Helvetica Neue\\\",Arial,sans-serif,\\\"Apple Color Emoji\\\",\\\"Segoe UI Emoji\\\",\\\"Segoe UI Symbol\\\"\",\"fontColor\":\"#55595c\"};","/* React */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n/* Plotly */\nimport Plot from 'react-plotly.js';\n/* Bootstrap */\nimport Form from 'react-bootstrap/Form';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Spinner from 'react-bootstrap/Spinner';\nimport Alert from 'react-bootstrap/Alert';\nimport Card from 'react-bootstrap/Card';\n/* Numeral */\nimport Numeral from \"numeral\";\nimport \"numeral/locales/fr\";\n/* Make Bootstrap variables available */\nimport Style from './style.scss';\n/* DataFrame */\nimport DataFrame from 'dataframe-js';\n\n\n/* Setup */\nNumeral.locale('fr');\nconst apiUrl = 'https://www.landalvic.fr/melodi-api';\nconst dsd = 'DERA_ds1';\nconst plotColors = [Style.primary, Style.success, Style.info];\nconst defaultLayout = {\n    colorway: plotColors,\n    paper_bgcolor: Style.bodyBg,\n    plot_bgcolor: Style.bodyBg,\n    autosize: true,\n    font: {\n        family: Style.fontFamily,\n        color: Style.fontColor,\n    },\n    hoverlabel: {\n        bordercolor: Style.fontColor,\n        bgcolor: Style.bodyBg,\n        font: {\n            family: Style.fontFamily,\n            color: Style.fontColor,\n        }\n    }\n};\n\nconst isEmpty = df => df.dim()[0]===0;\n\nclass Graph extends React.Component {\n    /* This component holds the application data and state */\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            filterDims: null, // Dataset metadata\n            filterValues: [], // Current filters\n            plotData: new DataFrame([]), // Data for the current plot\n            isLoading: false,\n        };\n        this.onMenuChange = this.onMenuChange.bind(this);\n    }\n\n    createDataFrame(data) {\n        /* Parse the data returned by the API into a DataFrame */\n\n        try {\n            const parsed = data.observations.map(x => {\n                let dims = x.dimensions.reduce((r, d) =>\n                    ({...r, [d.concept.code]: d.modalite.code})\n                , {});\n                dims = {...dims, value: x.valeur};\n                return dims;\n            });\n            return new DataFrame(parsed, Object.keys(parsed[0])); \n        } catch {\n            return new DataFrame([]);\n        }\n    }\n\n    dataRequest() {\n        /* Get the data for the current filters */\n\n        this.setState({isLoading: true}, () => {\n            const queryParams = Object.entries(this.state.filterValues)\n                .map(e => e.join('=')).join('&');\n            fetch(apiUrl+'/data/'+this.props.dsd+'?'+queryParams)\n                .then(res => res.json())\n                .then(data => this.setState({\n                    plotData: this.createDataFrame(data),\n                    isLoading: false,\n                }));\n        });\n    }\n\n    onMenuChange(dimCode, valCode) {\n        /* Update the state's filters when they change in the form */\n\n        this.setState(state => {\n            const list = state.filterValues;\n            list[dimCode] = valCode;\n            return {filterValues: list};\n        }, () => this.dataRequest());\n    }\n\n    componentDidMount() {\n        /* Get the metadata, set the initial filters and get the initial data */\n\n        fetch(apiUrl+'/datastructure/'+this.props.dsd)\n        .then(results => results.json())\n        .then(data => {\n            const dims = data.dimensions\n                .filter(x => this.props.filterableDims.includes(x.concept.code));\n            this.setState({filterDims: dims}, () => {\n                const dict = {}\n                this.state.filterDims.map(x => {\n                    dict[x.concept.code] = 'TOTAL';\n                });\n                this.setState({filterValues: dict}, () => this.dataRequest());\n            });\n        });\n    }\n\n    render() {\n        const style = {\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n        };\n        return (\n            <Container>\n                {this.state.filterDims &&\n                    <Row>\n                        <Col xs={4}>\n                            <GraphFilters filterDims={this.state.filterDims}\n                                filterValues={this.state.filterValues}\n                                onMenuChange={this.onMenuChange} />\n                        </Col>\n                        <Col xs={8} style={style}>\n                            {this.state.isLoading ? <Spinner animation=\"border\"/>:\n                                <GraphPlot plotData={this.state.plotData} />}\n                        </Col>\n                    </Row>\n                }\n            </Container>\n        );\n    }\n}\n\nclass GraphPlot extends React.Component {\n    /* Display the plot based on the current data */\n    \n    constructor(props) {\n        super(props);\n        this.df = this.props.plotData;\n        this.measure = 'revenu_salarial_net_mensuel'; // TODO: get this from the dataset\n        this.min = this.measure + '_min';\n        this.max = this.measure + '_max';\n        this.byVar = null; //'SEXE';\n    }\n\n    formatData() {\n        /* Prepare the data for plotting */\n\n        const groupByVars = this.byVar ? ['id', this.byVar]: ['id'];\n        this.df = this.props.plotData\n            .withColumn('id', r => parseInt(r.get('STAT').match('\\\\d+')[0]))\n            .groupBy(...groupByVars)\n            .pivot('MESURE', vals => vals.toArray('value')[0])\n            .sortBy('id');\n    }\n\n    computeTickText(ticks) {\n        /* Compute text to show at specified ticks */\n\n        let vals = this.df.filter(r => ticks.includes(r.get('id')));\n        vals = this.byVar ? vals.sortBy(this.byVar) : vals; \n        vals = vals.toArray(this.min)\n            .map(x => Numeral(x).format('0,0$'))\n            .slice(0, ticks.length);\n        return vals;\n    }\n\n    computeHoverText() {\n        /* Format text displayed when hovering over bars */\n\n        this.df = this.df.withColumn('hovertext', r => {\n            const lowerBound = Numeral(r.get(this.min)).format('0,0$');\n            const upperBound = Numeral(r.get(this.max)).format('0,0$');\n            const eff = r.get('effectifs');\n            const number = eff<1 ? 'moins  de 1' : Numeral(eff).format('0,0');\n            const unit = eff>1 ? 'individus' : 'individu'; \n            const words = ['Entre', lowerBound, 'et', upperBound, ':',\n                number, unit]; \n            return words.join(' ');\n        });\n    }\n\n    selectPlotData(df) {\n        const data = df\n            .select('id', 'effectifs', 'hovertext')\n            .renameAll(['x', 'y', 'hovertext'])\n            .toDict();\n        return data;\n    }\n\n    render() {\n        if (isEmpty(this.props.plotData)) {\n            return <Alert variant='light'>No data</Alert>;\n        } else {\n            this.formatData();\n            this.computeHoverText();\n            let dataOptions = {\n                type: 'bar',\n                hoverinfo: 'text',\n            };\n            let data = {};\n            if (this.byVar) {\n                data = this.df\n                    .groupBy(this.byVar)\n                    .toCollection()\n                    .map(x => {\n                        let d = this.selectPlotData(x.group);\n                        d.name = x.groupKey[this.byVar];\n                        d.opacity = .5;\n                        return d;\n                    });\n            } else {\n                data =  [this.selectPlotData(this.df)];\n            }\n            data = data.map(x => ({...x, ...dataOptions}));\n\n            const tickvals = [1, 25, 50, 75, 99];\n            const ticktext = this.computeTickText(tickvals);\n            const lay = {\n                bargap: 0,\n                barmode: 'overlay',\n                xaxis: {\n                    tickmode: 'array',\n                    tickvals: tickvals,\n                    ticktext: ticktext,\n                },\n            };\n            return <Plot data={data} \n                layout={{...defaultLayout, ...lay}} \n                useResizeHandler={true}\n                style={{width: \"100%\", height: \"100%\"}} />;\n        } \n    }\n}\n\nclass GraphFilters extends React.Component {\n    /* Display all the possible filters based on the metadata */\n\n    render() {\n        const sel = this.props.filterDims.map((x,i) => \n            <GraphFilter key={i} filterDim={x}\n                filterValue={this.props.filterValues[x.concept.code]} \n                onMenuChange={this.props.onMenuChange} />);\n        return (\n            <Card>\n                <Card.Body>\n                    <Form>\n                        {sel}\n                    </Form>\n                </Card.Body>\n            </Card>\n        );\n    }\n}\n\nclass GraphFilter extends React.Component {\n    /* Display a given filter base of the metadata */\n\n    constructor(props) {\n        super(props);\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    handleChange(event) {\n        this.props.onMenuChange(this.props.filterDim.concept.code, event.target.value);\n    }\n\n    render() {\n        const dim = this.props.filterDim;\n        const val = this.props.filterValue;\n        const opt = dim.conceptScheme.modalites.map((x, i) =>\n            <option value={x.code} key={i}>{x.libelleFr}</option>\n        );\n        return (\n            <Form.Group controlId={dim.concept.code}>\n                <Form.Label>{dim.concept.libelleFr}</Form.Label>\n                <Form.Control as=\"select\" value={val} onChange={this.handleChange}>\n                    {opt}\n                </Form.Control>\n            </Form.Group>\n        );\n    }\n}\n\nReactDOM.render(\n    <Graph dsd={dsd} filterableDims={['ACTIVITE', 'PCS_ESE', 'AGE', 'SEXE']}/>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}